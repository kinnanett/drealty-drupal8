<?php

/**
 * @file
 * DRealty module.
 */

use Drupal\drealty\Entity\ConnectionEntity;
use Drupal\drealty\Entity\ListingType;
use Drupal\drealty\ListingInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\language\Entity\Language as LanguageEntity;

/**
 * Implements hook_help().
 */
function drealty_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.drealty':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The DRealty module manages the creation, editing, deletion, settings, and display of the Real Estate connections, resources and listings. Listing items provided by the DRealty module are typically displayed as pages on your site, and include a title, some meta-data (author, creation time, listing type, etc.), and optional fields containing text or other data (fields are managed by the <a href="!field">Field module</a>). For more information, see <a href="!drealty">the online documentation for the DRealty module</a>.', array('!drealty' => 'https://drupal.org/project/drealty', '!field' => \Drupal::url('help.page', array('name' => 'field')))) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Creating listings') . '</dt>';
      $output .= '<dd>' . t('When a new listing is created, the DRealty module records basic information about the listing, including the author, date of creation, and the <a href="!listing-type">Listing type</a>. It also manages the <em>publishing options</em>, which define whether or not the listing is published, promoted to the front page of the site, and/or sticky at the top of content lists. Default settings can be configured for each <a href="!listing-type">type of listing</a> on your site.', array('!listing-type' => \Drupal::url('drealty.listing_type_list'))) . '</dd>';
      $output .= '<dt>' . t('Creating custom listing types') . '</dt>';
      $output .= '<dd>' . t('The DRealty module gives users with the <em>Administer drealty listing types</em> permission the ability to <a href="!listing-new">create new listing types</a> in addition to the default ones already configured. Creating custom listing types allows you the flexibility to add <a href="!field">fields</a> and configure default settings that suit the differing needs of various site listings.', array('!listing-new' => \Drupal::url('drealty.listing_type_add'), '!field' => \Drupal::url('help.page', array('name' => 'field')))) . '</dd>';
      $output .= '<dt>' . t('Administering listings') . '</dt>';
      $output .= '<dd>' . t('The <a href="!content">Listings administration page</a> allows you to review and bulk manage your site listings.', array('!content' => \Drupal::url('drealty.listing_list'))) . '</dd>';
      $output .= '<dt>' . t('Creating revisions') . '</dt>';
      $output .= '<dd>' . t('The DRealty module also enables you to create multiple versions of any listing, and revert to older versions using the <em>Revision information</em> settings.') . '</dd>';
      $output .= '<dt>' . t('User permissions') . '</dt>';
      $output .= '<dd>' . t('The DRealty module makes a number of permissions available for each listing type, which can be set by role on the <a href="!permissions">permissions page</a>.', array('!permissions' => \Drupal::url('user.admin_permissions', array(), array('fragment' => 'module-drealty')))) . '</dd>';
      $output .= '</dl>';
      return $output;

    case 'drealty.listing_type_add':
      return '<p>' . t('Individual listing types can have different fields, behaviors, and permissions assigned to them.') . '</p>';

    case 'field_ui.form_display_overview_drealty_listing':
    case 'field_ui.form_display_overview_form_mode_drealty_listing':
      $type = $route_match->getParameter('drealty_listing_type');
      return '<p>' . t('Listing items can be edited using different form modes. Here, you can define which fields are shown and hidden when %type listing is edited in each form mode, and define how the field form widgets are displayed in each form mode.', array('%type' => $type->label())) . '</p>' ;

    case 'field_ui.display_overview_drealty_listing':
    case 'field_ui.display_overview_view_mode_drealty_listing':
      $type = $route_match->getParameter('drealty_listing_type');
      return '<p>' . t('Listing items can be displayed using different view modes: Teaser, Full content, Print, RSS, etc. <em>Teaser</em> is a short format that is typically used in lists of multiple listings. <em>Full content</em> is typically used when the listing is displayed on its own page.') . '</p>' .
      '<p>' . t('Here, you can define which fields are shown and hidden when %type listing is displayed in each view mode, and define how the fields are displayed in each view mode.', array('%type' => $type->label())) . '</p>';

    case 'drealty.listing_revision_overview':
      return '<p>' . t('Revisions allow you to track differences between multiple versions of your listing, and revert back to older versions.') . '</p>';

    case 'entity.drealty_listing.edit_form':
      $listing = $route_match->getParameter('drealty_listing');
      $type = $listing->getType();
      return (!empty($type->help) ? Xss::filterAdmin($type->help) : '');

    case 'drealty.listing_add':
      $type = $route_match->getParameter('drealty_listing_type');
      return (!empty($type->help) ? Xss::filterAdmin($type->help) : '');
  }
}

/**
 * Implements hook_theme().
 */
function drealty_theme() {
  return array(
    'drealty_listing' => array(
      'render element' => 'elements',
      'file' => 'drealty.theme.inc',
      'template' => 'drealty-listing',
    ),
    'drealty_listing_add_list' => array(
      'variables' => array('content' => NULL),
      'file' => 'drealty.theme.inc',
      'template' => 'drealty-listing-add-list',
    ),
    'drealty_listing_edit_form' => array(
      'render element' => 'form',
      'template' => 'drealty-listing-edit-form',
    ),
    'field__drealty_listing__title' => array(
      'base hook' => 'field',
      'template' => 'field--drealty-listing--title',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function drealty_permission() {
  $perms = array(
    'administer drealty connections' => array(
      'title' => t('Administer DRealty Connections'),
      'restrict access' => TRUE,
    ),
    'administer drealty listing types' => array(
      'title' => t('Administer DRealty Listing Types'),
      'restrict access' => TRUE,
    ),
    'administer drealty listings' => array(
      'title' => t('Administer DRealty Listings'),
      'restrict access' => TRUE,
    ),
    'access drealty listing overview' => array(
      'title' => t('Access the Listing overview page'),
      'description' => t('Get an overview of <a href="!url">all listings</a>.', array('!url' => \Drupal::url('drealty.listing_list'))),
    ),
    'view drealty listings' => array(
      'title' => t('View published listings'),
    ),
    'view own unpublished drealty listings' => array(
      'title' => t('View own unpublished listings'),
    ),
    'view all drealty listing revisions' => array(
      'title' => t('View all listing revisions'),
    ),
    'revert all drealty listing revisions' => array(
      'title' => t('Revert all listing revisions'),
      'description' => t('Role requires permission <em>view revisions</em> and <em>edit rights</em> for listings in question, or <em>administer drealty listings</em>.'),
    ),
    'delete all drealty listing revisions' => array(
      'title' => t('Delete all listing revisions'),
      'description' => t('Role requires permission to <em>view revisions</em> and <em>delete rights</em> for listings in question, or <em>administer drealty listings</em>.'),
    ),
  );

  // Generate standard listing permissions for all applicable listing types.
  foreach (ListingType::loadMultiple() as $type) {
    $perms += drealty_list_permissions($type);
  }

  return $perms;
}

/**
 * Menu argument loader. Returns a DRealty Connection entity.
 *
 * @param $id
 * @return \Drupal\drealty\ConnectionInterface
 *
 * @see \Drupal\drealty\ConnectionForm::Form()
 */
function drealty_connection_load($id) {
  return ConnectionEntity::load($id);
}

/**
 * Menu argument loader. Returns a DRealty Listing Type entity.
 *
 * @param $id
 * @return \Drupal\drealty\ListingTypeInterface
 *
 * @see \Drupal\drealty\ListingTypeForm::Form()
 */
function drealty_listing_type_load($id) {
  return ListingType::load($id);
}

/**
 * Implements hook_toolbar_alter().
 */
function drealty_toolbar_alter(&$items) {
  if (isset($items['administration']['tray'])) {
    $items['administration']['tray']['#attached']['css'][] = drupal_get_path('module', 'drealty') . '/assets/css/drealty.admin.css';
  }
}

/**
 * Updates all listings of one type to be of another type.
 *
 * @param string $old_id
 *   The current listing type of the listings.
 * @param string $new_id
 *   The new listing type of the listings.
 *
 * @return
 *   The number of listings whose listing type field was modified.
 */
function drealty_listing_type_update_listings($old_id, $new_id) {
  return \Drupal::entityManager()->getStorage('drealty_listing')->updateType($old_id, $new_id);
}

/**
 * Returns the listing type label for the passed listing.
 *
 * @param \Drupal\drealty\ListingInterface $listing
 *   A listing entity to return the listing type's label for.
 *
 * @return string|false
 *   The listing type label or FALSE if the listing type is not found.
 *
 * @TODO use the generic helper when available
 */
function drealty_get_type_label(ListingInterface $listing) {
  $type = entity_load('drealty_listing_type', $listing->bundle());
  return $type ? $type->label() : FALSE;
}

/**
 * Finds the last time a listing was changed.
 *
 * @param $lid
 *   The ID of a listing.
 * @param string $langcode
 *   (optional) The language the listing has been last modified in. Defaults to the
 *   listing language.
 *
 * @return string
 *   A unix timestamp indicating the last time the listing was changed.
 *
 * @todo Remove once https://drupal.org/node/2002180 is resolved. It's only used
 *       for validation, which will be done by EntityChangedConstraintValidator.
 */
function drealty_listing_last_changed($lid, $langcode = NULL) {
  $changed = \Drupal::entityManager()->getStorage('drealty_listing')->loadUnchanged($lid)->getChangedTime();
  return $changed ? $changed : FALSE;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function drealty_theme_suggestions_drealty_listing(array $variables) {
  $suggestions = array();
  $listing = $variables['elements']['#drealty_listing'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'drealty_listing__' . $sanitized_view_mode;
  $suggestions[] = 'drealty_listing__' . $listing->bundle();
  $suggestions[] = 'drealty_listing__' . $listing->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'drealty_listing__' . $listing->id();
  $suggestions[] = 'drealty_listing__' . $listing->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 */
function drealty_preprocess_html(&$variables) {
  // If on an individual listing page, add the listing type to body classes.
  if (($listing = \Drupal::routeMatch()->getParameter('drealty_listing')) && $listing instanceof ListingInterface) {
    $variables['attributes']['class'][] = drupal_html_class('drealty--type-' . $listing->getType());
  }
}

/**
 * Checks whether the current page is the full page view of the passed-in listing.
 *
 * @param \Drupal\drealty\ListingInterface $listing
 *   A listing entity.
 *
 * @return integer|FALSE
 *   The ID of the listing if this is a full page view, otherwise FALSE.
 */
function drealty_listing_is_page(ListingInterface $listing) {
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() == 'entity.drealty_listing.canonical') {
    $page_listing = $route_match->getParameter('drealty_listing');
  }
  return (!empty($page_listing) ? $page_listing->id() == $listing->id() : FALSE);
}

/**
 * Implements hook_entity_extra_field_info().
 */
function drealty_entity_extra_field_info() {
  $extra = array();
  $module_language_enabled = \Drupal::moduleHandler()->moduleExists('language');
  $description = t('DRealty module element');

  foreach (ListingType::loadMultiple() as $bundle) {
    // Add the 'language' select if Language module is enabled and the bundle
    // has multilingual support.
    // Visibility of the ordering of the language selector is the same as on the
    // drealty_listing/add form.
    if ($module_language_enabled) {
      $configuration = language_get_default_configuration('drealty_listing', $bundle->type);
      if ($configuration['language_show']) {
        $extra['drealty_listing'][$bundle->type]['form']['langcode'] = array(
          'label' => t('Language'),
          'description' => $description,
          'weight' => 0,
        );
      }
    }
    $extra['drealty_listing'][$bundle->type]['display']['langcode'] = array(
      'label' => t('Language'),
      'description' => $description,
      'weight' => 0,
      'visible' => FALSE,
    );
  }

  return $extra;
}

/**
 * Gathers a listing of links to listings.
 *
 * @param $result
 *   A database result object from a query to fetch listing entities.
 * @param $title
 *   (optional) A heading for the resulting list.
 *
 * @return array|FALSE
 *   A renderable array containing a list of linked listing titles fetched from
 *   $result, or FALSE if there are no rows in $result.
 */
function drealty_listing_title_list($result, $title = NULL) {
  $items = array();
  $num_rows = FALSE;
  foreach ($result as $listing) {
    // Do not use $listing->label() here, because $listing comes from the database.
    $items[] = l($listing->title, 'drealty_listing/' . $listing->lid);
    $num_rows = TRUE;
  }

  return $num_rows ? array('#theme' => 'item_list__drealty_listing', '#items' => $items, '#title' => $title) : FALSE;
}

/**
 * Helper function to generate standard listing permission list for a given type.
 *
 * @param $name
 *   The machine name of the listing type.
 *
 * @return array
 *   An array of permission names and descriptions.
 */
function drealty_list_permissions($type) {
  // Build standard list of listing permissions for this type.
  $perms = array(
    "create {$type->type} listing" => array(
      'title' => t('%type_name: Create new listings', array('%type_name' => $type->name)),
    ),
    "edit own {$type->type} listing" => array(
      'title' => t('%type_name: Edit own listings', array('%type_name' => $type->name)),
    ),
    "edit any {$type->type} listing" => array(
      'title' => t('%type_name: Edit any listing', array('%type_name' => $type->name)),
    ),
    "delete own {$type->type} listing" => array(
      'title' => t('%type_name: Delete own listings', array('%type_name' => $type->name)),
    ),
    "delete any {$type->type} listing" => array(
      'title' => t('%type_name: Delete any listing', array('%type_name' => $type->name)),
    ),
    "view {$type->type} listing revisions" => array(
      'title' => t('%type_name: View listing revisions', array('%type_name' => $type->name)),
    ),
    "revert {$type->type} listing revisions" => array(
      'title' => t('%type_name: Revert listing revisions', array('%type_name' => $type->name)),
      'description' => t('Role requires permission <em>view revisions</em> and <em>edit rights</em> for listings in question, or <em>administer drealty listings</em>.'),
    ),
    "delete {$type->type} listing revisions" => array(
      'title' => t('%type_name: Delete listing revisions', array('%type_name' => $type->name)),
      'description' => t('Role requires permission to <em>view revisions</em> and <em>delete rights</em> for listings in question, or <em>administer drealty listings</em>.'),
    ),
  );
  return $perms;
}

/**
 * Implements hook_modules_uninstalled().
 */
function drealty_modules_uninstalled($modules) {
  // Remove module-specific settings from all listing types.
  $config_names = \Drupal::configFactory()->listAll('drealty.type.');
  foreach ($config_names as $config_name) {
    $config = \Drupal::config($config_name);
    $changed = FALSE;
    foreach ($modules as $module) {
      if ($config->get('settings.' . $module)) {
        $config->clear('settings.' . $module);
        $changed = TRUE;
      }
    }
    if ($changed) {
      $config->save();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete() for 'language_entity'.
 */
function drealty_language_entity_delete(LanguageEntity $language) {
  // On listings with this language, unset the language.
  \Drupal::entityManager()->getStorage('drealty_listing')->clearRevisionsLanguage($language);
}
