<?php

/**
 * @file
 * DRealty module.
 */

use Drupal\drealty\Entity\ConnectionEntity;
use Drupal\drealty\Entity\ListingType;
use Drupal\drealty\ListingInterface;

/**
 * Implements hook_permission().
 */
function drealty_permission() {
  $return = array();

  $return['administer drealty connections'] = array(
    'title' => t('Administer DRealty Connections'),
    'restrict access' => TRUE,
  );

  $return['administer drealty listing types'] = array(
    'title' => t('Administer DRealty Listing Types'),
    'restrict access' => TRUE,
  );

  $return['administer drealty listings'] = array(
    'title' => t('Administer DRealty Listings'),
    'restrict access' => TRUE,
  );

  return $return;
}

/**
 * Menu argument loader. Returns a DRealty Connection entity.
 *
 * @param $id
 * @return \Drupal\drealty\ConnectionInterface
 *
 * @see \Drupal\drealty\ConnectionForm::Form()
 */
function drealty_connection_load($id) {
  return ConnectionEntity::load($id);
}

/**
 * Menu argument loader. Returns a DRealty Listing Type entity.
 *
 * @param $id
 * @return \Drupal\drealty\ListingTypeInterface
 *
 * @see \Drupal\drealty\ListingTypeForm::Form()
 */
function drealty_listing_type_load($id) {
  return ListingType::load($id);
}

/**
 * Implements hook_toolbar_alter().
 */
function drealty_toolbar_alter(&$items) {
  if (isset($items['administration']['tray'])) {
    $items['administration']['tray']['#attached']['css'][] = drupal_get_path('module', 'drealty') . '/assets/css/drealty.admin.css';
  }
}

/**
 * Updates all listings of one type to be of another type.
 *
 * @param string $old_id
 *   The current listing type of the listings.
 * @param string $new_id
 *   The new listing type of the listings.
 *
 * @return
 *   The number of listings whose listing type field was modified.
 */
function drealty_listing_type_update_listings($old_id, $new_id) {
  return \Drupal::entityManager()->getStorage('drealty_listing')->updateType($old_id, $new_id);
}

/**
 * Returns the listing type label for the passed listing.
 *
 * @param \Drupal\drealty\ListingInterface $listing
 *   A listing entity to return the listing type's label for.
 *
 * @return string|false
 *   The listing type label or FALSE if the listing type is not found.
 *
 * @TODO use the generic helper when available
 */
function drealty_get_type_label(ListingInterface $listing) {
  $type = entity_load('drealty_listing_type', $listing->bundle());
  return $type ? $type->label() : FALSE;
}

/**
 * Finds the last time a listing was changed.
 *
 * @param $lid
 *   The ID of a listing.
 * @param string $langcode
 *   (optional) The language the listing has been last modified in. Defaults to the
 *   listing language.
 *
 * @return string
 *   A unix timestamp indicating the last time the listing was changed.
 *
 * @todo Remove once https://drupal.org/node/2002180 is resolved. It's only used
 *       for validation, which will be done by EntityChangedConstraintValidator.
 */
function drealty_listing_last_changed($lid, $langcode = NULL) {
  $changed = \Drupal::entityManager()->getStorage('drealty_listing')->loadUnchanged($lid)->getChangedTime();
  return $changed ? $changed : FALSE;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function drealty_theme_suggestions_drealty_listing(array $variables) {
  $suggestions = array();
  $listing = $variables['elements']['#drealty_listing'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'drealty_listing__' . $sanitized_view_mode;
  $suggestions[] = 'drealty_listing__' . $listing->bundle();
  $suggestions[] = 'drealty_listing__' . $listing->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'drealty_listing__' . $listing->id();
  $suggestions[] = 'drealty_listing__' . $listing->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 */
function drealty_preprocess_html(&$variables) {
  // If on an individual listing page, add the listing type to body classes.
  if (($listing = \Drupal::routeMatch()->getParameter('drealty_listing')) && $listing instanceof ListingInterface) {
    $variables['attributes']['class'][] = drupal_html_class('drealty--type-' . $listing->getType());
  }
}

/**
 * Checks whether the current page is the full page view of the passed-in listing.
 *
 * @param \Drupal\drealty\ListingInterface $listing
 *   A listing entity.
 *
 * @return integer|FALSE
 *   The ID of the listing if this is a full page view, otherwise FALSE.
 */
function drealty_listing_is_page(ListingInterface $listing) {
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() == 'entity.drealty_listing.canonical') {
    $page_listing = $route_match->getParameter('drealty_listing');
  }
  return (!empty($page_listing) ? $page_listing->id() == $listing->id() : FALSE);
}
